C use 3 types of memory allocation area : stack, heap and static
stack -> memory allocated for local variables
heap -> memory allocated for dynamic memory allocation
static -> memory allocated for global variables

& return a pointer
pointer are just variable that store memory address
in c everything is passed by value,
if we want to modify a variable i with a function,
we need to pass a pointer to i to the function to then manipulate the memory
address
 
simply passing the value of i to the function will not work
because the value of i will be copied
 
In this case, we pass the address of i to the function
then we can manipulate the value of i with the address
 
void f(int *j) {
  *j = 1;
}
 
int main() {
  int i = 0;
  f(&i);
}
 
main()
i will be equal to 1
 
a variable not declared as a pointer will be pre allocated on the stack at
compile time and cannot be deferenced
 
local variable are automatically freed at the end of their scope
to prevent this we can use static variable
static variable lifetime is the lifetime of the program
 
NULL
a null pointer is a pointer that points to nothing (no memory address)
accessing the value pointed by a null pointer will result in a segmentation
fault
 

